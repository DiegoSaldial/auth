# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Time

type Usuario{
  id: ID! 
  nombres: String!
  apellidos: String!
  username: String!
  telefono: String
  documento: String!
  correo: String
  foto_url: String
  fecha_nac: Time
  domicilio: String
  registrado: Time!
  estado: Boolean! 
} 

type UsuarioLogin {
  id: ID! 
  nombres: String!
  apellidos: String!
  username: String!
  foto_url: String
  telefono: String
  correo: String
  documento: String!
  fecha_nac: Time
  domicilio: String
  registrado: Time!
  estado: Boolean!
  dataname: String!
  rol_id: ID!
  rol: String!
  exp: String!
} 

type Rol { 
  id: ID! 
  nombre: String!
  bit: Int!
}

type Tokens {
  username: String! 
  token: String! 
  registrado: Time!
}

type RolPermiso {
  metodo: String! 
  descripcion: String! 
  """ los roles que tienen acceso a este permiso, expresado en suma sumaria << bits"""
  rol_bits: Int!
}
# ==============================================================================

type UsuariosResponse {
  id: ID! 
  nombres: String!
  apellidos: String!
  username: String!
  foto_url: String
  telefono: String
  documento: String!
  fecha_nac: Time
  domicilio: String
  correo: String
  registrado: Time!
  estado: Boolean!
  dataname: String!
  roles:[Rol!]!
}

type RolResponse{
  id: ID! 
  nombre: String!
  bit: Int!
  permisos: Int!
  usuarios: Int!
}
type RolesUserResponse{
  id: ID! 
  nombre: String!
  bit: Int!
  permisos: [RolPermiso!]! 
}

# ==============================================================================
input NewUsuario { 
  nombres: String!
  apellidos: String!
  username: String!
  documento: String!
  password: String
  foto_url: String
  telefono: String
  correo: String
  fecha_nac: Time
  domicilio: String
  roles:[ID!]!
} 

input UpdateUsuario {
  id: ID!  
  nombres: String!
  apellidos: String!
  username: String!
  documento: String!
  password: String
  foto_url: String
  telefono: String
  correo: String
  fecha_nac: Time
  domicilio: String
  roles:[ID!]!
}  

input NewRol { 
  nombre: String! 
  permisos: [String!]!
}

input UpdateRol {
  id: ID!  
  nombre: String! 
  permisos: [String!]!
} 
# ==============================================================================



# go run github.com/99designs/gqlgen generate
# CGO_ENABLED=0 go build -ldflags="-s -w" -o taxisapp server.go
# scp taxisapp root@144.202.34.58:/root/apps/taxisapp/
type Query {
  """ Retorna al usuario con el username proporcionados"""
  usuarioByUsername(username:String!): UsuariosResponse!
  """ Retorna un listado de los permisos registrados """
  permisos:[RolPermiso!]!
  """ Retorna un listado de los roles registrados """
  roles(lite:Boolean!):[RolResponse!]! 
  """ Retorna un listado de los roles registrados para un usuario """
  rolesByUsuario(usuario_id:ID!, permisos: Boolean!):[RolesUserResponse!]! 
  """ Retorna un listado de los usuarios registrados """
  usuarios:[UsuariosResponse!]! 
  """ Retorna un listado de los usuarios segun el rol """
  usuariosByRol(rol_id:ID!):[UsuariosResponse!]! 
  """ listar todos los permisos accesibles por un rol """
  permisosByRol(rol_id:ID!,):[RolPermiso!]! 
  # ============================================================
  # ============================================================
  """ Retorna las direcciones asociadas a un usuario """
    direccionesByUsuario(usuario_id:ID!): [Direcciones!]!
    """ Retorna las categoias de vehiculos disponibles """
    categoria_vehiculos: [CategoriaVehiculosResponse!]!
    """ Retorna una categoria """
    categoria_vehiculo(id:ID!): CategoriaVehiculosResponse!
    """ Retorna los vehiculos registrados """
    vehiculos: [VehiculosResponse!]! 
    """ Retorna los vehiculos registrados """
    vehiculo(id:ID!): VehiculosResponse! 
    """ Retorna los vehiculos por categoria """
    vehiculosByCategoria(categoria_id:ID!): [VehiculosResponse!]!
    """ Retorna vehiculos asociados a un conductor """
    vehiculosByConductor(usuario_id:ID!): [VehiculosResponse!]!
    """ Retorna los usuarios asignados a un vehiculo """
    conductoresByVehiculo(vehiculo_id:ID!): [UsuariosResponse!]!
    """ Retorna los usuarios asignados como conductores """
    conductores: [UsuariosResponse!]!
    """ Retorna los usuarios asignados como conductores """
    clientes: [UsuariosResponse!]!
    """ Retorna las solicitudes de viajes disponibles dentro de un radio seleccionado """
    viajesCercanos(lat:Float!,lon:Float!,radioMts:Int!): [ViajesResponse!]!
    """ Retorna los viajes de un usuario """
    viajesByUsuario(usuario_id:ID!): [ViajesResponse!]!
    """ Retorna los viajes de un usuario que haya solicitado un vehiculo """
    viajesByPasajero(usuario_id:ID!): [ViajesResponse!]!
    """ Retorna los viajes de un usuario que haya aceptado el viaje """
    viajesByConductor(usuario_id:ID!): [ViajesResponse!]!
    """ Retorna los viajes segun la categoria """
    viajesByCategoria(categoria_id:ID!): [ViajesResponse!]!
    """ Retorna los viajes en el rango de fechas y los que no tienen conductor asignado y estado 1 """
    viajesByFecha(input:QueryFechas!): [ViajesResponse!]!
}



# la logica es la sig:
# primero te loqueas, esto devuelve un array de roles
# segundo seleccionas el rol, esto recien crea el token para ese rol
# tercero ya puedes usar las demas funciones
type Mutation {
  """ Autentifica al usuario y retorna un listado de roles asignados a ese usuario """
  login(username:String!, password:String!): [Rol!]!
  """ Autentifica al usuario usando el rol seleccionado """
  useRol(username:String!, password:String!, rol_id:ID!): UsuarioLogin!
  """ Registra a un nuevo usuario en el sistema y retorna los datos del registro """
  createUsuario(input: NewUsuario!): Usuario! 
  """ Actualiza a un usuario y retorna los datos actualizados """
  updateUsuario(input: UpdateUsuario!): Usuario! 
  """ Registra un nuevo rol en el sistema y retorna los datos del registro """
  createRol(input: NewRol!): Rol!
  """ elimina un rol registrado en el sistema """
  deleteRol(rol_id:ID!): Boolean!
  """ Modifica los datos de un rol y retorna los datos modificados """
  modificarRol(input: UpdateRol!): Rol!
  # SE HAN ELIMINADO, ESTO DEBE SER AGREGADO DIRECTO POR CODIGO
  # YA QUE CADA PERNISO VA LIGADO A UNA FUNCION GRAPHQL
  # """ Registra un uevo permiso en el sistema y retorna el registrado """
  # crearNuevoPermiso(input:NewRolPermiso!): RolPermiso!
  # """ Elimina un permiso del sistema """
  # eliminarPermiso(metodo:String!): Boolean!
  # """ Actualiza los datos del permiso y retorna el registro """
  # actualizarPermiso(input:NewRolPermiso!): RolPermiso! 
  # ==============================================================
  # ==============================================================
  """ Crea una direccion, si se pasa el id lo actualiza """
    createUpdateDireccion(input:CreateDirecciones!): Direcciones!
    """ Crea una categoria de vehiculo, si se pasa el id lo actualiza"""
    createUpdateCategoriaVehiculo(input:CreateCategoriaVehiculos!): CategoriaVehiculosResponse!
    """ Crea un vehiculo si se pasa el id lo actualiza"""
    createUpdateVehiculo(input:CreateVehiculos!): VehiculosResponse!
    """ Crea un registro con el vehiculo y usuario asignado como conductor """
    asignarVehiculo(input:CreateConductorVehiculos!): ConductorVehiculos!
    """ desvincula a un conductor del vehiculo """
    quitarVehiculo(input:CreateConductorVehiculos!): Boolean!
    """ Crea un nuevo viaje que va estar disponible para los conductores """
    createViaje(input:CreateViajes!): ViajesResponse!
    """ Crea un registro con el conductor que acepta el viaje"""
    aceptarViaje(viaje_id:ID!,usuario_id:ID!): ViajesResponse!
    """ El conductor cancela el viaje, se elimina el id conductor del viaje y queda libre para otro conductor """
    cancelarViaje(id:ID!): ViajesResponse!
    """ El pasajero finaliza el viaje, marcando el estado a false y nadie puede aceptar el viaje """
    finalizarViaje(id:ID!): ViajesResponse!
    """ Crea un registro de la ubicacion actual del viaje """
    setUbicacionViaje(input:CreateViajesLocations!): ViajesLocations!
}