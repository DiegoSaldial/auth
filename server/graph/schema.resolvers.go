package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"taxis/database/auth/roles"
	"taxis/database/auth/rolpermiso"
	"taxis/database/auth/usuarios"
	"taxis/database/auth/xauth"
	"taxis/graph/model"
	"taxis/taxis/categoriavehiculos"
	"taxis/taxis/conductorvehiculos"
	"taxis/taxis/direcciones"
	"taxis/taxis/vehiculos"
	"taxis/taxis/viajes"
	"taxis/taxis/viajeslocations"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) ([]*model.Rol, error) {
	return xauth.Login(ctx, r.DB, username, password)
}

// UseRol is the resolver for the useRol field.
func (r *mutationResolver) UseRol(ctx context.Context, username string, password string, rolID string) (*model.UsuarioLogin, error) {
	return xauth.UseRol(ctx, r.DB, username, password, rolID)
}

// CreateUsuario is the resolver for the createUsuario field.
func (r *mutationResolver) CreateUsuario(ctx context.Context, input model.NewUsuario) (*model.Usuario, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "createUsuario")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.CreateUsuario(r.DB, input)
}

// UpdateUsuario is the resolver for the updateUsuario field.
func (r *mutationResolver) UpdateUsuario(ctx context.Context, input model.UpdateUsuario) (*model.Usuario, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "updateUsuario")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.UpdateUsuario(r.DB, input)
}

// CreateRol is the resolver for the createRol field.
func (r *mutationResolver) CreateRol(ctx context.Context, input model.NewRol) (*model.Rol, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "createRol")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return roles.CreateRol(r.DB, input)
}

// DeleteRol is the resolver for the deleteRol field.
func (r *mutationResolver) DeleteRol(ctx context.Context, rolID string) (bool, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "deleteRol")
	if data == nil {
		return false, errors.New(err.Error())
	}
	return roles.DeleteRol(r.DB, rolID)
}

// ModificarRol is the resolver for the modificarRol field.
func (r *mutationResolver) ModificarRol(ctx context.Context, input model.UpdateRol) (*model.Rol, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "modificarRol")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return roles.ModificarRol(r.DB, input)
}

// CreateUpdateDireccion is the resolver for the createUpdateDireccion field.
func (r *mutationResolver) CreateUpdateDireccion(ctx context.Context, input model.CreateDirecciones) (*model.Direcciones, error) {
	return direcciones.Crear(r.DB, input)
}

// CreateUpdateCategoriaVehiculo is the resolver for the createUpdateCategoriaVehiculo field.
func (r *mutationResolver) CreateUpdateCategoriaVehiculo(ctx context.Context, input model.CreateCategoriaVehiculos) (*model.CategoriaVehiculos, error) {
	return categoriavehiculos.Crear(r.DB, input)
}

// CreateUpdateVehiculo is the resolver for the createUpdateVehiculo field.
func (r *mutationResolver) CreateUpdateVehiculo(ctx context.Context, input model.CreateVehiculos) (*model.Vehiculos, error) {
	return vehiculos.Crear(r.DB, input)
}

// AsignarVehiculo is the resolver for the asignarVehiculo field.
func (r *mutationResolver) AsignarVehiculo(ctx context.Context, input model.CreateConductorVehiculos) (*model.ConductorVehiculos, error) {
	return conductorvehiculos.Crear(r.DB, input)
}

// CreateViaje is the resolver for the createViaje field.
func (r *mutationResolver) CreateViaje(ctx context.Context, input model.CreateViajes) (*model.Viajes, error) {
	return viajes.Crear(r.DB, input)
}

// AceptarViaje is the resolver for the aceptarViaje field.
func (r *mutationResolver) AceptarViaje(ctx context.Context, viajeID string, usuarioID string) (*model.Viajes, error) {
	return viajes.AceptarViaje(r.DB, viajeID, usuarioID)
}

// CancelarViaje is the resolver for the cancelarViaje field.
func (r *mutationResolver) CancelarViaje(ctx context.Context, id string) (*model.Viajes, error) {
	return viajes.CancelarViaje(r.DB, id)
}

// FinalizarViaje is the resolver for the finalizarViaje field.
func (r *mutationResolver) FinalizarViaje(ctx context.Context, id string) (*model.Viajes, error) {
	return viajes.FinalizarViaje(r.DB, id)
}

// SetUbicacionViaje is the resolver for the setUbicacionViaje field.
func (r *mutationResolver) SetUbicacionViaje(ctx context.Context, input model.CreateViajesLocations) (*model.ViajesLocations, error) {
	return viajeslocations.SetUbicacion(r.DB, input)
}

// UsuarioByUsername is the resolver for the usuarioByUsername field.
func (r *queryResolver) UsuarioByUsername(ctx context.Context, username string) (*model.UsuariosResponse, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "usuarioByUsername")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.UsuarioByUsernameRoles(r.DB, username)
}

// Permisos is the resolver for the permisos field.
func (r *queryResolver) Permisos(ctx context.Context) ([]*model.RolPermiso, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "permisos")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return rolpermiso.Permisos(r.DB)
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, lite bool) ([]*model.RolResponse, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "roles")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return roles.Listar(r.DB, lite)
}

// Usuarios is the resolver for the usuarios field.
func (r *queryResolver) Usuarios(ctx context.Context) ([]*model.UsuariosResponse, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "roles")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.Usuarios(r.DB)
}

// PermisosByRol is the resolver for the permisosByRol field.
func (r *queryResolver) PermisosByRol(ctx context.Context, rolID string) ([]*model.RolPermiso, error) {
	data, err := xauth.CtxValueApp(ctx, r.DB, "permisosByRol")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return rolpermiso.PermisosByRol(r.DB, rolID)
}

// DireccionesByUsuario is the resolver for the direccionesByUsuario field.
func (r *queryResolver) DireccionesByUsuario(ctx context.Context, usuarioID string) ([]*model.Direcciones, error) {
	return direcciones.GetByUsuario(r.DB, usuarioID)
}

// CategoriaVehiculos is the resolver for the categoria_vehiculos field.
func (r *queryResolver) CategoriaVehiculos(ctx context.Context) ([]*model.CategoriaVehiculos, error) {
	return categoriavehiculos.Listar(r.DB)
}

// Vehiculos is the resolver for the vehiculos field.
func (r *queryResolver) Vehiculos(ctx context.Context) ([]*model.Vehiculos, error) {
	return vehiculos.Listar(r.DB)
}

// VehiculosByCategoria is the resolver for the vehiculosByCategoria field.
func (r *queryResolver) VehiculosByCategoria(ctx context.Context, categoriaID string) ([]*model.Vehiculos, error) {
	return vehiculos.ListarByCategoria(r.DB, categoriaID)
}

// VehiculosByConductor is the resolver for the vehiculosByConductor field.
func (r *queryResolver) VehiculosByConductor(ctx context.Context, usuarioID string) ([]*model.Vehiculos, error) {
	return vehiculos.ListarByConductor(r.DB, usuarioID)
}

// ConductoresByVehiculo is the resolver for the conductoresByVehiculo field.
func (r *queryResolver) ConductoresByVehiculo(ctx context.Context, vehiculoID string) ([]*model.UsuariosResponse, error) {
	return conductorvehiculos.UsuariosByVehiculo(r.DB, vehiculoID)
}

// ViajesCercanos is the resolver for the viajesCercanos field.
func (r *queryResolver) ViajesCercanos(ctx context.Context, lat float64, lon float64, radioMts int) ([]*model.Viajes, error) {
	return viajes.ListarByRadio(r.DB, lat, lon, radioMts)
}

// ViajesByUsuario is the resolver for the viajesByUsuario field.
func (r *queryResolver) ViajesByUsuario(ctx context.Context, usuarioID string) ([]*model.Viajes, error) {
	return viajes.ListarByUsuario(r.DB, usuarioID)
}

// ViajesByPasajero is the resolver for the viajesByPasajero field.
func (r *queryResolver) ViajesByPasajero(ctx context.Context, usuarioID string) ([]*model.Viajes, error) {
	return viajes.ListarByPasajero(r.DB, usuarioID)
}

// ViajesByConductor is the resolver for the viajesByConductor field.
func (r *queryResolver) ViajesByConductor(ctx context.Context, usuarioID string) ([]*model.Viajes, error) {
	return viajes.ListarByConductor(r.DB, usuarioID)
}

// ViajesByCategoria is the resolver for the viajesByCategoria field.
func (r *queryResolver) ViajesByCategoria(ctx context.Context, categoriaID string) ([]*model.Viajes, error) {
	return viajes.ListarByCategoria(r.DB, categoriaID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
